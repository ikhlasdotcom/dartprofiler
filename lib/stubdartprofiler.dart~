import 'package:dartprofiler/platform_metrics.dart';

// If you get a list index out of bounds error, increase the list length here.
const anchorsListLength = 16;
class GlobalProfiler {
  static int startTick = 0;
  static int endTick = 0;
  static final List<Anchor> anchors = List<Anchor>.filled(anchorsListLength, makeAnchor());
  static int? parentAnchorIndex;
}

typedef Anchor = ({
    String label,
    int exclusiveElapsedTicks,
    int inclusiveElapsedTicks,
    int hitCount
});

Anchor makeAnchor() {
  return (
    label: '',
    exclusiveElapsedTicks: 0,
    inclusiveElapsedTicks: 0,
    hitCount: 0
  );
}

typedef ProfileBlock = ({
    String label,
    int anchorIndex,
    int? parentAnchorIndex,
    int startTick,
    int oldRootElapsedTicks
});

// Marks the start of the program. Anchors created before a beginProfile() call will have inaccurate numbers.
void beginProfile() {
  GlobalProfiler.startTick = readCPUTimer();
}

void endAndPrintProfile() {
  void printTimeElapsed(int totalCPUElapsed, Anchor anchor) {
    final (:label, :exclusiveElapsedTicks, :inclusiveElapsedTicks, :hitCount) = anchor;
    double percentageExclusive = 100 * (exclusiveElapsedTicks / totalCPUElapsed);

    if (exclusiveElapsedTicks != inclusiveElapsedTicks) {
      double percentageInclusive = 100 * (inclusiveElapsedTicks / totalCPUElapsed);
      print('  ${label}[${hitCount}]: ${exclusiveElapsedTicks} (${percentageExclusive.toStringAsPrecision(4)}%, ${percentageInclusive.toStringAsPrecision(4)}% w/children)');
    } else {
      print('  ${label}[${hitCount}]: ${exclusiveElapsedTicks} (${percentageExclusive.toStringAsPrecision(4)}%)');
    }
  }
  
  GlobalProfiler.endTick = readCPUTimer();
  double cpuFreq = estimateCPUTimerFreq();

  int totalCPUElapsed = GlobalProfiler.endTick - GlobalProfiler.startTick;

  if (cpuFreq > 0) {
    print('Total time: ${(1000 * totalCPUElapsed / cpuFreq).toStringAsPrecision(4)}ms (CPU freq ${cpuFreq.toStringAsPrecision(2)})');
  }

  for (final anchor in GlobalProfiler.anchors) {
    if (anchor.exclusiveElapsedTicks > 0) {
      printTimeElapsed(totalCPUElapsed, anchor);
    }
  }
}

ProfileBlock markStart(String label, int uid) {
  final parentAnchorIndex = GlobalProfiler.parentAnchorIndex;
  GlobalProfiler.parentAnchorIndex = uid;
  return (
    label: label,
    anchorIndex: uid,
    parentAnchorIndex: parentAnchorIndex,
    startTick: readCPUTimer(),
    oldRootElapsedTicks: GlobalProfiler.anchors[uid].inclusiveElapsedTicks
  );
}

void markEnd(ProfileBlock block) {
  final (:label, :anchorIndex, :parentAnchorIndex, :startTick, :oldRootElapsedTicks) = block;
  final newElapsedTicks = readCPUTimer() - startTick;

  final Anchor anchor = GlobalProfiler.anchors[anchorIndex];
  final (label: _, :exclusiveElapsedTicks, :inclusiveElapsedTicks, :hitCount) = anchor;

  GlobalProfiler.parentAnchorIndex = parentAnchorIndex;

  if (parentAnchorIndex != null) {
    final Anchor parentAnchor = GlobalProfiler.anchors[parentAnchorIndex];
    
    GlobalProfiler.anchors[parentAnchorIndex!] = (
      label: parentAnchor.label,
      exclusiveElapsedTicks: parentAnchor.exclusiveElapsedTicks - newElapsedTicks,
      inclusiveElapsedTicks: parentAnchor.inclusiveElapsedTicks,
      hitCount: parentAnchor.hitCount
    );
  }

  GlobalProfiler.anchors[anchorIndex] = (
    label: label,
    exclusiveElapsedTicks: exclusiveElapsedTicks + newElapsedTicks,
    inclusiveElapsedTicks: oldRootElapsedTicks + newElapsedTicks,
    hitCount: hitCount + 1
  );
}
